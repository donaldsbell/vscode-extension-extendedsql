{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.extendedsql",
	"name": "Extended SQL",
	"_comment": {
		"line1" :"# Order matters!!!!",
		"line2": "Matches are performed in the order listed.",
		"line3": "TextMate considers lines of a document one at a time, looking within each one for matches.",
		"line4": "When we make a match, thatâ€™s the end for everything in that line up to that point.",
		"line5": "Thus, you can effectively make conditional rules by judicious ordering of a patterns array." },
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#booleans"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#identifiers"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-dash.esql",
					"match": "--.*$"
				},
				{
					"name": "comment.block.esql",
					"begin": "/\\*",
					"end": "\\*/",
					"patterns": [
						{
							"name": "comment.block.esql",
							"match": "."
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.broker.schema",
					"match": "^(?=\\s*[^\\s])\\s*(?i)BROKER SCHEMA\\b"
				},
				{
					"name": "keyword.control.esql",
					"match": "\\b(?i)(BEGIN|END|IF|THEN|ELSE|WHILE|DO|FOR|CALL|RETURN)\\b"
				},
				{
					"name": "keyword.operator.logical.esql",
					"match": "\\b(?i)(AND|OR|NOT|IN|LIKE|RLIKE|IS|NULL)\\b"
				},
				{
					"name": "punctuation.terminator.statement.esql",
					"match": ";"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.comparison.esql",
					"match": "(==|!=|<=|>=|<|>)"
				},
				{
					"name": "keyword.operator.arithmetic.esql",
					"match": "(\\+|\\-|\\*|\\/|%)"
				},
				{
					"name": "keyword.operator.assignment.esql",
					"match": "="
				},
				{
					"name": "keyword.control.assignment.esql",
					"match": "\\b(?i)(SET|MOVE)\\b"
				},
				{
					"name": "keyword.control.assignment.create.esql",
					"match": "\\b(?i)(SET|CREATE (FIRSTCHILD|NEXTSIBLING|LASTCHILD)|OF|AS|NAME)\\b"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "entity.name.function.esql",
					"match": "\\b(?i)(abs|acos|asin|atan|atan2|ceil|cos|cosh|exp|floor|log|log10|pow|round|sin|sinh|sqrt|tan|tanh|max|min|avg|count|sum|concat|length|ltrim|rtrim|substring|trim|upper|lower|split|to_string|to_int|to_long|to_double|to_boolean|to_datetime|date_format|date_parse|now|bucket|case|coalesce|greatest|least|if|isnull|mv_avg|mv_concat|mv_count|mv_dedupe|mv_first|mv_last|mv_max|mv_median|mv_min|mv_sort|mv_sum|mv_zip|st_contains|st_disjoint|st_intersects|st_within|st_x|st_y)\\b"
				},
				{
					"name": "keyword.function.database.esql",
					"match": "\\b(?i)(SQLCODE|SQLERRORTEXT|SQLNATIVEERROR|SQLSTATE)\\b"
				},
				{
					"name": "keyword.function.compare.esql",
					"match": "\\b(?i)(LASTMOVE)\\b"
				}
			]
		},
		"booleans": {
			"patterns": [
				{
					"name": "constant.boolean.esql",
					"match": "\\b(?i)(TRUE|FALSE)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.esql",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.esql",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.esql",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.esql",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.backtick.esql",
					"begin": "`",
					"end": "`",
					"patterns": [
						{
							"name": "constant.character.escape.esql",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.decimal.esql",
					"match": "\\b\\d+\\.\\d+\\b"
				},
				{
					"name": "constant.numeric.integer.esql",
					"match": "\\b\\d+\\b"
				}
			]
		},
		"identifiers": {
			"patterns": [
				{			
					"name": "variable.declaration.esql",
					"begin": "\\b(?i)DECLARE\\b",
					"end": "\\b(BOOLEAN|CHAR|CHARACTER|INTEGER|REFERENCE TO)\\b",
					"patterns": [
						{
							"name": "variable.other.esql",
							"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
						}
					]
				},
				{
					"name": "variable.other.esql",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
				}
			]
		}
	}
}